<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"  mouseDown="onMouseDown(event)">
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			public var outgoingStream:NetStream;
			public var lineMSG:Object=new Object();
			public var localOrRemote_int:int;
			


			private function onMouseDown(e:MouseEvent):void {
				trace("on vdDisplay MouseDow  ");
				
				
				lineMSG=new Object();
				//add some extra data to ensure every sent object is unique
				lineMSG.id = new Date().time;					
				//var lineStartPoint:Point=new Point(e.localX, e.localY);
				var lineStartPoint:Point=new Point(this.mouseX, this.mouseY);
				lineMSG.lineStartPoint=lineStartPoint;
				
				startDrawingLine(lineMSG);
				
				
				if (outgoingStream)
				{
					lineMSG.localOrRemote_int=localOrRemote_int;
					outgoingStream.send("onImLine_s", FlexGlobals.topLevelApplication.userNameInput.text, lineMSG);
					trace("MouseDown:"+"("+lineMSG.lineStartPoint.x+","+lineMSG.lineStartPoint.y+")");
				}else{
					trace("outgoingStream is null");
				}
		
				this.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove,false,0,true);
				this.addEventListener(MouseEvent.MOUSE_UP, onMouseUp,false,0,true);
				
			}
			public function initLine():void{
				drawLineUI.graphics.beginFill(0xF00FFF);
				drawLineUI.graphics.endFill();
				drawLineUI.graphics.lineStyle(2, 0x00ff00);
				
			}
			
			public function startDrawingLine(startPoint:Object):void{
						
				initLine();
				drawLineUI.graphics.moveTo(startPoint.lineStartPoint.x, startPoint.lineStartPoint.y);	
				trace("startDrawingLine:"+startPoint.lineStartPoint.x+", "+startPoint.lineStartPoint.y);

			}
	
			private function onMouseMove(e:MouseEvent):void {
				
				if (e.buttonDown) {

					
					//var lineEndPoint:Point=new Point(e.localX, e.localY);
					var lineEndPoint:Point=new Point(this.mouseX, this.mouseY);
					lineMSG.lineEndPoint=lineEndPoint;
					
					onDrawingLine(lineMSG);	
					
					if (outgoingStream)
					{

						outgoingStream.send("onImLine_m", FlexGlobals.topLevelApplication.userNameInput.text, lineMSG);
						trace("MouseDown:"+"("+lineMSG.lineEndPoint.x+","+lineMSG.lineEndPoint.y+")");
					}   
					
				}else{
					drawLineUI.graphics.clear();
					
				}
				trace("on vdDisplay onMouseMove  ");

			}
			
			public function onDrawingLine(drawingPoint:Object):void{
				drawLineUI.graphics.clear();//当鼠标移动，擦除上次画的线，重新画线
				initLine();
				drawLineUI.graphics.moveTo(drawingPoint.lineStartPoint.x, drawingPoint.lineStartPoint.y);
				drawLineUI.graphics.lineTo(drawingPoint.lineEndPoint.x, drawingPoint.lineEndPoint.y);
				trace("onDrawingLine:"+drawingPoint.lineEndPoint.x+", "+drawingPoint.lineEndPoint.y);
				
				var angle:Number = polarAngle(new Point(drawingPoint.lineEndPoint.x, drawingPoint.lineEndPoint.y), new Point(drawingPoint.lineStartPoint.x, drawingPoint.lineStartPoint.y));
				
				// draw arrow head
				drawLineUI.graphics.moveTo(drawingPoint.lineEndPoint.x - (20 * Math.cos((angle - 45) * Math.PI / 180)),
					drawingPoint.lineEndPoint.y - (20 * Math.sin((angle - 45) * Math.PI / 180)));
				
				drawLineUI.graphics.lineTo(drawingPoint.lineEndPoint.x + (5 * Math.cos((angle) * Math.PI / 180)),
					drawingPoint.lineEndPoint.y + (5 * Math.sin((angle) * Math.PI / 180)));
				
				drawLineUI.graphics.lineTo(drawingPoint.lineEndPoint.x - (20 * Math.cos((angle + 45) * Math.PI / 180)),
					drawingPoint.lineEndPoint.y - (20 * Math.sin((angle + 45) * Math.PI / 180)));
  
			}
			protected function polarAngle(point:Point, center:Point=null):Number
			{
				if (!center)
					center = new Point(0, 0);
				
				return Math.atan2(point.y - center.y, point.x - center.x) * 180 / Math.PI;
			}
			
			
			
			private function onMouseUp(e:MouseEvent):void {
				
				onOverDraw();
				trace("on vdDisplay onMouseUp  ");
				this.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);
				this.removeEventListener(MouseEvent.MOUSE_MOVE,onMouseMove);
			}
			
			
			public function onOverDraw():void{
				drawLineUI.graphics.clear();
			}
			

			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<mx:VideoDisplay id="vdDisplay"  width="100%" height="100%"/>
	<mx:UIComponent id="drawLineUI" width="100%" height="100%"  />
	
</s:NavigatorContent>
